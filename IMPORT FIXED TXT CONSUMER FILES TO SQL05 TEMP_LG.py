###################################################################
#IMPORT FIXED TXT CONSUMER FILES TO SQL05 TEMP_LG
print("IMPORT FIXED TXT CONSUMER FILES TO SQL05 TEMP_LG")
print("")

import sqlalchemy
from sqlalchemy import create_engine #for connnecting to sql
#from sqlalchemy import text #for running sql queries
from sqlalchemy.types import NVARCHAR #for defining column data types
import collections
from collections import defaultdict #for reading the fixed txt file, not sure if necessary
import pandas as pd
import csv #for splitting the files quickly
import os
from datetime import datetime # for keeping track of how long this script takes

###################################################################
# USER INPUT SECTION, UPDATE AS NEEDED
server = "SQL05" #example: SQL04
database = "TEMP_LG" #example: TEMP_OK
merged_table_name = "GPCONSUMER_TEST_240304_files_1_2_3" #all the files will be imported to this a table with this name
split_amount = 50000


#USUALLY LEAVE THESE AS IS
extension = "txt" #extension to search for
seperator_description = "fixed-width" #just for print statements
path = os.path.dirname(os.path.realpath(__file__)) #current directory without a slash at the end

#defines the column starts and ends (0-index, first number is inclusive, second number is exclusive, so 0,1 only get the 0-indexed character)
column_specs = [
  (0,30), #FIRST
  (30,31), #MIDDLE
  (31,61), #LAST
  (61,69), #PREFIX
  (69,116), #ADDRESS1
  (116,128), #ADDRESS2
  (128,158), #CITY
  (158,160), #STATE
  (160,165), #ZIP
  (165,169), #ZIP4
  (169,172), #DPV 
  (172,176), #CR 
  (176,178), #STATECODE
  (178,181), #COUNTYCODE
  (181,191), #LATITUDE
  (191,202), #LONGITUDE
  (202,203), #ADDRESS_TYPE
  (203,207), #MSA_CODE
  (207,212), #CBSA_CODE
  (212,213), #ADDRESS LINE
  (213,214), #SUPPRESSION DMA DO NOT MAIL
  (214,220), #CENSUS TRACT
  (220,221), #CENSUS BLOCK GROUP
  (221,224), #CENSUS BLOCK
  (224,225), #DPV INDICATOR
  (225,235), #PHONE
  (235,236), #TIMEZONE
  (236,237), #GENDER
  (237,247), #HOUSEHOLD ID
  (247,252), #INDIVIDUAL ID
  (252,253), #INFERRED HOUSEHOLD RANK 
  (253,257), #BIRTH_YEAR
  (257,259), #BIRTH_MONTH
  (259,261), #BIRTH_DATE
  (261,263), #EXACT AGE
  (263,265), #EST AGE
  (265,266), #EST INCOME
  (266,267), #NET WORTH
  (267,268), #MULTIPLE LINES OF CREDIT INDICATOR
  (268,269), #NEW CREDIT LINE INDICATOR
  (269,270), #EDUCATION
  (270,271), #OCCUPATION
  (271,275), #OCCUPATION_DETAILED
  (275,276), #BUSINESS OWNER
  (276,277), #NUMBER OF CHILDREN
  (277,278), #PRESENCE OF CHILDREN
  (278,279), #AGE 00 - 02 MALE
  (279,280), #AGE 00 - 02 FEMALE
  (280,281), #AGE 00 - 02 UNKNOWN GENDER
  (281,282), #AGE 03 - 05 MALE
  (282,283), #AGE 03 - 05 FEMALE
  (283,284), #AGE 03 - 05 UNKNOWN GENDER
  (284,285), #AGE 06 - 10 MALE
  (285,286), #AGE 06 - 10 FEMALE
  (286,287), #AGE 06 - 10 UNKNOWN GENDER
  (287,288), #AGE 11 - 15 MALE
  (288,289), #AGE 11 - 15 FEMALE
  (289,290), #AGE 11 - 15 UNKNOWN GENDER
  (290,291), #AGE 16 - 17 MALE
  (291,292), #AGE 16 - 17 FEMALE
  (292,293), #AGE 16 - 17 UNKNOWN GENDER
  (293,294), #MARITAL STATUS IN THE HHLD
  (294,295), #HOMEOWNER
  (295,297), #LOR
  (297,298), #DWELLING
  (298,299), #NUMBER OF ADULTS
  (299,300), #HOUSEHOLD SIZE 
  (300,301), #HOME MARKET VALUE
  (301,302), #GENERATIONS IN HOUSEHOLD
  (302,303), #MAIL ORDER BUYER
  (303,304), #MAIL ORDER RESPONDER
  (304,305), #CATALOG BUYER
  (305,306), #ONLINE BUYER
  (306,307), #WAREHOUSE CLUB
  (307,308), #DISCOUNT SHOPPER
  (308,309), #CLOTHING BUYER - WOMENS
  (309,310), #CLOTHING BUYER - WOMENS - PETITE
  (310,311), #CLOTHING BUYER - WOMENS - PLUS SIZE
  (311,312), #CLOTHING BUYER - WOMENS - JUNIORS
  (312,313), #CLOTHING BUYER - MENS
  (313,314), #CLOTHING BUYER - MENS - PLUS SIZE
  (314,315), #CLOTHING BUYER - YOUNG MENS
  (315,316), #CLOTHING BUYER - CHILDERNS
  (316,317), #HEALTH PRODUCTS BUYER
  (317,318), #COSMETICS BUYER
  (318,319), #JEWELERY BUYER
  (319,320), #LUGGAGE BUYER
  (320,321), #AMERICAN EXPRESS GOLD
  (321,322), #AMERICAN EXPRESS REGULAR
  (322,323), #DISCOVER GOLD
  (323,324), #DISCOVER REGULAR
  (324,325), #RETAIL CARD - PREMIUM
  (325,326), #RETAIL CARD 
  (326,327), #MASTERCARD GOLD
  (327,328), #MASTERCARD REGULAR
  (328,329), #VISA GOLD
  (329,330), #VISA REGULAR
  (330,331), #CHECKING ACCOUNT
  (331,332), #GAS/DEPARTMENT/RETAIL CARD
  (332,333), #TRAVEL & ENTERTAINMENT CARD
  (333,334), #CREDIT CARD OTHER
  (334,335), #PREMIUM CREDIT CARD
  (335,336), #DEPARTMENT STORE GOLD CARD
  (336,337), #FREQUENT CREDIT CARD USER
  (337,338), #NEW CREDIT CARD HOLDER
  (338,339), #BANK CARD HOLDER
  (339,340), #ACTIVE INVESTOR
  (340,341), #SAVINGS / CDS / RETIREMENT ACCOUNT
  (341,342), #REAL ESTATE INVESTOR
  (342,343), #STOCK & BOND INVESTOR
  (343,344), #FINANCIAL PUBLICATIONS READER
  (344,345), #BUSINESS OPPORTUNITY SEEKER
  (345,346), #INTERNATIONAL INVESTOR
  (346,349), #INVESTMENT PROPERTIES OWNED
  (349,350), #DONORS 
  (350,351), #DONORS BY MAIL
  (351,352), #CHARITABLE DONORS
  (352,353), #ANIMAL WELFARE DONORS
  (353,354), #DONORS TO THE ARTS
  (354,355), #CHILDREND WELFARE DONORS
  (355,356), #WILDLIFE DONORS
  (356,357), #ENVIRONMENTAL DONORS
  (357,358), #MEDICAL RESEARCH DONORS
  (358,359), #HUMANITARIAN DONORS
  (359,360), #POLITICAL DONORS
  (360,361), #DONORS TO REPUBLICAN CAUSES
  (361,362), #DONORS TO DEMOCRATIC CAUSES
  (362,363), #DONORS TO RELIGIOUS CAUSES
  (363,364), #DONORS TO VETERANS CAUSES
  (364,365), #DONORS TO OTHER CAUSES
  (365,366), #DONORS TO COMMUNITY BASED ORGANIZATIONS
  (366,367), #VETERAN PRESENT 
  (367,368), #CHILDREN MAGAZINE SUBSCRIBER
  (368,369), #SINGLE PARENT FLAG
  (369,370), #YOUNG CHILDREN IN HOUSEHOLD
  (370,371), #TOY BUYER
  (371,372), #BABY PRODUCT BUYER
  (372,373), #SCHOOL AGE CHILDREN 
  (373,374), #CHILDREN PRODUCT CLUSTER CODE
  (374,375), #YOUNG ADULT PRESENT
  (375,376), #SENIOR PRESENT
  (376,377), #CHILDREN PRODUCT BUYER
  (377,378), #GRANDPARENT INDICATOR
  (378,379), #CHRISTIAN FAMILY INDICATOR
  (379,380), #PET IN HOUSEHOLD
  (380,381), #HORSEBACK RIDING INTEREST
  (381,382), #CAT PRESENT IN HOUSEHOLD
  (382,383), #DOG PRESENT IN HOUSEHOLD
  (383,384), #BIRD ENTHUSIASTS
  (384,385), #OTHER PET IN HOUSEHOLD
  (385,386), #CONTINUING EDUCATION INTEREST
  (386,387), #WORKING WOMEN IN HOUSEHOLD
  (387,388), #AFRICAN AMERICAN PROFESSIONAL
  (388,389), #SMALL OFFICE / HOME OFFICE 
  (389,390), #CAREER MINDED
  (390,391), #MAGAZINE SUBSCRIBER
  (391,392), #BOOK BUYER
  (392,393), #AUDIO BOOK BUYER
  (393,394), #READING INTEREST
  (394,395), #RELIGIOUS READING INTEREST
  (395,396), #SCIENCE FICTION READING INTEREST
  (396,397), #MAGAZINE READER
  (397,398), #AUDIO BOOK INTEREST
  (398,399), #HISTORY / MILITARY BUFF
  (399,400), #POLITICIAL INTEREST
  (400,401), #RELIGIOUS HOUSEHOLD
  (401,402), #ASTRONOMY INTEREST
  (402,403), #ONLINE EDUCATION INTEREST
  (403,404), #GAME PLAYER
  (404,405), #WIFI HOME NETWORK
  (405,406), #MOVIE BUYER / RENTER / DOWNLOADER
  (406,407), #HOME THEATER 
  (407,408), #COMPUTER / ACCESSORIES BUYER
  (408,409), #LUXURY APPLIANCE BUYER
  (409,410), #SATELLITE TV INTEREST
  (410,411), #SURROUND SOUND SYSTEM
  (411,412), #MP3 PLAYER
  (412,413), #LP/CD MUSIC COLLECTOR
  (413,414), #MUSIC ENTHUSIAST
  (414,415), #MOVIE COLLECTOR
  (415,416), #CABLE TELEVISION PRESENT
  (416,417), #VIDEO GAMER
  (417,418), #SATELLITE DISH PRESENT
  (418,419), #COMPUTER OWNER
  (419,420), #COMPUTER GAMES
  (420,421), #CONSUMER ELECTRONICS BUYER
  (421,422), #MOVIE AND MUSIC CLUSTER
  (422,423), #CELL PHONE OWNER
  (423,424), #ANTIQUES BUYER
  (424,425), #ART BUYER
  (425,426), #THEATER ENTHUSIAST
  (426,427), #FINE ARTS ENTHUSIAST
  (427,428), #MUSICAL INSTUMENT IN HOUSEHOLD
  (428,429), #INTEREST IN COLLECTIBLES
  (429,430), #STAMP ENTHUSIAST
  (430,431), #COIN ENTHUSIAST
  (431,432), #ART ENTHUSIAST
  (432,433), #ANTIQUES ENTHUSIAST
  (433,434), #AVID COLLECTOR
  (434,435), #BASEBALL CARD / SPORTS MEMORABILIA BUYER
  (435,436), #MILITARY ENTHUSIAST
  (436,437), #COLLECTIBLE CLUSTER
  (437,438), #DO IT YOURSELFER
  (438,439), #AUTOMOTIVE WORK ENTHUSIAST
  (439,440), #KNITTING / SEWING ENTHUSIAST
  (440,441), #WOODWORKING ENTHUSIAST
  (441,442), #PHOTOGRAPHY ENTHUSIAST
  (442,443), #AVIATION ENTHUSIAST
  (443,444), #HOUSE PLANTS BUYER
  (444,445), #CRAFT ENTHUSIAST
  (445,446), #HOUSEHOLD PRODUCTS BUYER
  (446,447), #GARDENING PRODUCT BUYER
  (447,448), #GARDENING ENTHUSIAST
  (448,449), #PHOTOGRAPHY EQUIPMENT BUYER
  (449,450), #SMOKER
  (450,451), #FURNITURE BUYER
  (451,452), #HOME IMPROVEMENT
  (452,453), #NEEDS HOME IMPROVEMENTS
  (453,454), #WINE ENTHUSIAST
  (454,455), #COOKING ENTHUSIAST
  (455,456), #GOUMET COOKING PRODUCT BUYER
  (456,457), #ORGANIC FOOD BUYER
  (457,458), #COOKING & FOOD CLUSTER
  (458,459), #CROSSWORD PUZZLE PLAYER
  (459,460), #CASINO GAMBLER
  (460,461), #SWEEPSTAKES ENTHUSIAST
  (461,462), #INTEREST IN TRAVEL
  (462,463), #TRAVELS DOMESTICALLY
  (463,464), #TRAVELS INTERNATIONALLY
  (464,465), #CRUISE VACATION INTEREST
  (465,466), #AT HOME ENTHUSIASTS
  (466,467), #HANDS ON ENTHUSIASTS
  (467,468), #ACTIVE LIVING ENTHUSIASTS
  (468,469), #LUXURY LIFESTYLE ENTHUSIASTS
  (469,470), #CULTURAL ARTS ENTHUSIASTS
  (470,471), #HIGH TECH EARLY ADOPTERS
  (471,472), #HEALTHY LIVING ENTHUSIAST
  (472,473), #RUNNING ENTHUSIAST
  (473,474), #BICYCLING ENTHUSIAST
  (474,475), #AVID WALKER
  (475,476), #EXERCISE CLASS ENTHUSIAST
  (476,477), #AUTO RACING ENTHUSIAST
  (477,478), #SPORTS FAN
  (478,479), #FOOTBALL ENTHUSIAST
  (479,480), #BASEBALL ENTHUSIAST
  (480,481), #BASKETBALL ENTHUSIAST
  (481,482), #HOCKEY ENTHUSIAST
  (482,483), #SOCCER ENTHUSIAST
  (483,484), #TENNIS ENTHUSIAST
  (484,485), #GOLF ENTHUSIAST
  (485,486), #SKIING / SNOWBOARDING ENTHUSIAST
  (486,487), #SWIMMING ENTHUSIAST
  (487,488), #MOTORCYCLING ENTHUSIAST
  (488,489), #NASCAR ENTHUSIAST
  (489,490), #BOATING ENTHUSIAST
  (490,491), #SCUBA DIVING ENTHUSIAST
  (491,492), #SPORTING GOODS BUYER
  (492,493), #HUNTING PRODUCT BUYER
  (493,494), #AVID FISHER
  (494,495), #CAMPING ENTHUSIAST
  (495,496), #AVID HUNTER
  (496,497), #VITAMIN BUYER
  (497,498), #DIETING INTEREST
  (498,499), #SELF IMPROVEMENT ENTHUSIAST
  (499,500), #AUTO PARTS BUYER
  (500,508), #HOME VALUE ASSESSED
  (508,516), #PURCHASE DATE  (CCYYMMDD)
  (516,527), #PURCHASE PRICE
  (527,528), #SALES TRANSACTION CODE
  (528,536), #MOST RECENT MORTGAGE AMOUNT
  (536,544), #2ND MOST RECENT MORTGAGE AMOUNT
  (544,552), #PURCHASE 1ST MORTGAGE AMOUNT
  (552,560), #PURCHASE 2ND MORTGAGE AMOUNT
  (560,568), #MOST RECENT MORTGAGE DATE
  (568,576), #2ND MOST RECENT MORTGAGE DATE
  (576,584), #PURCHASE MORTGAGE DATE
  (584,585), #MOST RECENT MORTGAGE LOAN TYPE CODE
  (585,586), #2ND MOST RECENT MORTGAGE LOAN TYPE CODE 
  (586,587), #PURCHASE 1ST MORTGAGE LOAN TYPE CODE
  (587,588), #PURCHASE 2ND MORTGAGE LOAN TYPE CODE
  (588,591), #MOST RECENT LENDER CODE 
  (591,594), #2ND MOST RECENT LENDER CODE
  (594,597), #PURCHASE LENDER CODE
  (597,657), #MOST RECENT LENDER NAME
  (657,717), #2ND MOST RECENT LENDER NAME
  (717,777), #PURCHASE LENDER NAME
  (777,778), #MOST RECENT MORTGAGE INTEREST RATE TYPE
  (778,779), #2ND MOST RECENT MORTGAGE INTEREST RATE TYPE
  (779,780), #PURCHASE 1ST MORTGAGE INTEREST RATE TYPE
  (780,781), #PURCHASE 2ND MORTGAGE INTEREST RATE TYPE
  (781,787), #MOST RECENT MORTGAGE INTEREST RATE (NOTE INFERRED DECIMAL  NNDDDD)
  (787,793), #2ND MOST RECENT MORTGAGE INTEREST RATE  (NOTE INFERRED DECIMAL  NNDDDD)
  (793,799), #PURCHASE 1ST MORTGAGE INTEREST RATE  (NOTE INFERRED DECIMAL  NNDDDD)
  (799,805), #PURCHASE 2ND MORTGAGE INTEREST RATE  (NOTE INFERRED DECIMAL  NNDDDD)
  (805,809), #YEAR BUILT
  (809,810), #AIR CONDITIONING
  (810,811), #POOL
  (811,812), #FUEL
  (812,813), #SEWER
  (813,814), #WATER
  (814,817), #LOAN TO VALUE
  (817,819), #ETHNIC CODE
  (819,820), #ETHNIC-CONFIDENCE
  (820,821), #ETHNIC-GROUP
  (821,823), #LANGUAGE
  (823,824), #RELIGION
  (824,826), #HISPANIC COUNTRY-CODE
  (826,827), #ASSIMILATION CODES
  (827,828), #CREDIT RATING
  (828,829), #DO NOT CALL FLAG
  (829,839), #PERM INDIVIDUAL ID
]

#need to define the column names because there is no header column in the import files
column_names = [
  'FIRST', 
  'MIDDLE',  
  'LAST',  
  'PREFIX',
  'ADDRESS1',  
  'ADDRESS2',  
  'CITY',  
  'STATE',  
  'ZIP',
  'ZIP4',
  'DPV ',
  'CR ',
  'STATECODE',
  'COUNTYCODE',
  'LATITUDE',
  'LONGITUDE',
  'ADDRESS_TYPE',
  'MSA_CODE',
  'CBSA_CODE',
  'ADDRESS LINE',
  'SUPPRESSION DMA DO NOT MAIL',
  'CENSUS TRACT',
  'CENSUS BLOCK GROUP',
  'CENSUS BLOCK',
  'DPV INDICATOR',
  'PHONE',
  'TIMEZONE',
  'GENDER',
  'HOUSEHOLD ID',
  'INDIVIDUAL ID',
  'INFERRED HOUSEHOLD RANK ',
  'BIRTH_YEAR',
  'BIRTH_MONTH',
  'BIRTH_DATE',
  'EXACT AGE',
  'EST AGE',
  'EST INCOME',
  'NET WORTH',
  'MULTIPLE LINES OF CREDIT INDICATOR',
  'NEW CREDIT LINE INDICATOR',
  'EDUCATION',
  'OCCUPATION',
  'OCCUPATION_DETAILED',
  'BUSINESS OWNER',
  'NUMBER OF CHILDREN',
  'PRESENCE OF CHILDREN',
  'AGE 00 - 02 MALE',
  'AGE 00 - 02 FEMALE',
  'AGE 00 - 02 UNKNOWN GENDER',
  'AGE 03 - 05 MALE',
  'AGE 03 - 05 FEMALE',
  'AGE 03 - 05 UNKNOWN GENDER',
  'AGE 06 - 10 MALE',
  'AGE 06 - 10 FEMALE',
  'AGE 06 - 10 UNKNOWN GENDER',
  'AGE 11 - 15 MALE',
  'AGE 11 - 15 FEMALE',
  'AGE 11 - 15 UNKNOWN GENDER',
  'AGE 16 - 17 MALE',
  'AGE 16 - 17 FEMALE',
  'AGE 16 - 17 UNKNOWN GENDER',
  'MARITAL STATUS IN THE HHLD',
  'HOMEOWNER',
  'LOR',
  'DWELLING',
  'NUMBER OF ADULTS',
  'HOUSEHOLD SIZE ',
  'HOME MARKET VALUE',
  'GENERATIONS IN HOUSEHOLD',
  'MAIL ORDER BUYER',
  'MAIL ORDER RESPONDER',
  'CATALOG BUYER',
  'ONLINE BUYER',
  'WAREHOUSE CLUB',
  'DISCOUNT SHOPPER',
  'CLOTHING BUYER - WOMENS',
  'CLOTHING BUYER - WOMENS - PETITE',
  'CLOTHING BUYER - WOMENS - PLUS SIZE',
  'CLOTHING BUYER - WOMENS - JUNIORS',
  'CLOTHING BUYER - MENS',
  'CLOTHING BUYER - MENS - PLUS SIZE',
  'CLOTHING BUYER - YOUNG MENS',
  'CLOTHING BUYER - CHILDERNS',
  'HEALTH PRODUCTS BUYER',
  'COSMETICS BUYER',
  'JEWELERY BUYER',
  'LUGGAGE BUYER',
  'AMERICAN EXPRESS GOLD',
  'AMERICAN EXPRESS REGULAR',
  'DISCOVER GOLD',
  'DISCOVER REGULAR',
  'RETAIL CARD - PREMIUM',
  'RETAIL CARD ',
  'MASTERCARD GOLD',
  'MASTERCARD REGULAR',
  'VISA GOLD',
  'VISA REGULAR',
  'CHECKING ACCOUNT',
  'GAS/DEPARTMENT/RETAIL CARD',
  'TRAVEL & ENTERTAINMENT CARD',
  'CREDIT CARD OTHER',
  'PREMIUM CREDIT CARD',
  'DEPARTMENT STORE GOLD CARD',
  'FREQUENT CREDIT CARD USER',
  'NEW CREDIT CARD HOLDER',
  'BANK CARD HOLDER',
  'ACTIVE INVESTOR',
  'SAVINGS / CDS / RETIREMENT ACCOUNT',
  'REAL ESTATE INVESTOR',
  'STOCK & BOND INVESTOR',
  'FINANCIAL PUBLICATIONS READER',
  'BUSINESS OPPORTUNITY SEEKER',
  'INTERNATIONAL INVESTOR',
  'INVESTMENT PROPERTIES OWNED',
  'DONORS ',
  'DONORS BY MAIL',
  'CHARITABLE DONORS',
  'ANIMAL WELFARE DONORS',
  'DONORS TO THE ARTS',
  'CHILDREND WELFARE DONORS',
  'WILDLIFE DONORS',
  'ENVIRONMENTAL DONORS',
  'MEDICAL RESEARCH DONORS',
  'HUMANITARIAN DONORS',
  'POLITICAL DONORS',
  'DONORS TO REPUBLICAN CAUSES',
  'DONORS TO DEMOCRATIC CAUSES',
  'DONORS TO RELIGIOUS CAUSES',
  'DONORS TO VETERANS CAUSES',
  'DONORS TO OTHER CAUSES',
  'DONORS TO COMMUNITY BASED ORGANIZATIONS',
  'VETERAN PRESENT ',
  'CHILDREN MAGAZINE SUBSCRIBER',
  'SINGLE PARENT FLAG',
  'YOUNG CHILDREN IN HOUSEHOLD',
  'TOY BUYER',
  'BABY PRODUCT BUYER',
  'SCHOOL AGE CHILDREN ',
  'CHILDREN PRODUCT CLUSTER CODE',
  'YOUNG ADULT PRESENT',
  'SENIOR PRESENT',
  'CHILDREN PRODUCT BUYER',
  'GRANDPARENT INDICATOR',
  'CHRISTIAN FAMILY INDICATOR',
  'PET IN HOUSEHOLD',
  'HORSEBACK RIDING INTEREST',
  'CAT PRESENT IN HOUSEHOLD',
  'DOG PRESENT IN HOUSEHOLD',
  'BIRD ENTHUSIASTS',
  'OTHER PET IN HOUSEHOLD',
  'CONTINUING EDUCATION INTEREST',
  'WORKING WOMEN IN HOUSEHOLD',
  'AFRICAN AMERICAN PROFESSIONAL',
  'SMALL OFFICE / HOME OFFICE ',
  'CAREER MINDED',
  'MAGAZINE SUBSCRIBER',
  'BOOK BUYER',
  'AUDIO BOOK BUYER',
  'READING INTEREST',
  'RELIGIOUS READING INTEREST',
  'SCIENCE FICTION READING INTEREST',
  'MAGAZINE READER',
  'AUDIO BOOK INTEREST',
  'HISTORY / MILITARY BUFF',
  'POLITICIAL INTEREST',
  'RELIGIOUS HOUSEHOLD',
  'ASTRONOMY INTEREST',
  'ONLINE EDUCATION INTEREST',
  'GAME PLAYER',
  'WIFI HOME NETWORK',
  'MOVIE BUYER / RENTER / DOWNLOADER',
  'HOME THEATER ',
  'COMPUTER / ACCESSORIES BUYER',
  'LUXURY APPLIANCE BUYER',
  'SATELLITE TV INTEREST',
  'SURROUND SOUND SYSTEM',
  'MP3 PLAYER',
  'LP/CD MUSIC COLLECTOR',
  'MUSIC ENTHUSIAST',
  'MOVIE COLLECTOR',
  'CABLE TELEVISION PRESENT',
  'VIDEO GAMER',
  'SATELLITE DISH PRESENT',
  'COMPUTER OWNER',
  'COMPUTER GAMES',
  'CONSUMER ELECTRONICS BUYER',
  'MOVIE AND MUSIC CLUSTER',
  'CELL PHONE OWNER',
  'ANTIQUES BUYER',
  'ART BUYER',
  'THEATER ENTHUSIAST',
  'FINE ARTS ENTHUSIAST',
  'MUSICAL INSTUMENT IN HOUSEHOLD',
  'INTEREST IN COLLECTIBLES',
  'STAMP ENTHUSIAST',
  'COIN ENTHUSIAST',
  'ART ENTHUSIAST',
  'ANTIQUES ENTHUSIAST',
  'AVID COLLECTOR',
  'BASEBALL CARD / SPORTS MEMORABILIA BUYER',
  'MILITARY ENTHUSIAST',
  'COLLECTIBLE CLUSTER',
  'DO IT YOURSELFER',
  'AUTOMOTIVE WORK ENTHUSIAST',
  'KNITTING / SEWING ENTHUSIAST',
  'WOODWORKING ENTHUSIAST',
  'PHOTOGRAPHY ENTHUSIAST',
  'AVIATION ENTHUSIAST',
  'HOUSE PLANTS BUYER',
  'CRAFT ENTHUSIAST',
  'HOUSEHOLD PRODUCTS BUYER',
  'GARDENING PRODUCT BUYER',
  'GARDENING ENTHUSIAST',
  'PHOTOGRAPHY EQUIPMENT BUYER',
  'SMOKER',
  'FURNITURE BUYER',
  'HOME IMPROVEMENT',
  'NEEDS HOME IMPROVEMENTS',
  'WINE ENTHUSIAST',
  'COOKING ENTHUSIAST',
  'GOUMET COOKING PRODUCT BUYER',
  'ORGANIC FOOD BUYER',
  'COOKING & FOOD CLUSTER',
  'CROSSWORD PUZZLE PLAYER',
  'CASINO GAMBLER',
  'SWEEPSTAKES ENTHUSIAST',
  'INTEREST IN TRAVEL',
  'TRAVELS DOMESTICALLY',
  'TRAVELS INTERNATIONALLY',
  'CRUISE VACATION INTEREST',
  'AT HOME ENTHUSIASTS',
  'HANDS ON ENTHUSIASTS',
  'ACTIVE LIVING ENTHUSIASTS',
  'LUXURY LIFESTYLE ENTHUSIASTS',
  'CULTURAL ARTS ENTHUSIASTS',
  'HIGH TECH EARLY ADOPTERS',
  'HEALTHY LIVING ENTHUSIAST',
  'RUNNING ENTHUSIAST',
  'BICYCLING ENTHUSIAST',
  'AVID WALKER',
  'EXERCISE CLASS ENTHUSIAST',
  'AUTO RACING ENTHUSIAST',
  'SPORTS FAN',
  'FOOTBALL ENTHUSIAST',
  'BASEBALL ENTHUSIAST',
  'BASKETBALL ENTHUSIAST',
  'HOCKEY ENTHUSIAST',
  'SOCCER ENTHUSIAST',
  'TENNIS ENTHUSIAST',
  'GOLF ENTHUSIAST',
  'SKIING / SNOWBOARDING ENTHUSIAST',
  'SWIMMING ENTHUSIAST',
  'MOTORCYCLING ENTHUSIAST',
  'NASCAR ENTHUSIAST',
  'BOATING ENTHUSIAST',
  'SCUBA DIVING ENTHUSIAST',
  'SPORTING GOODS BUYER',
  'HUNTING PRODUCT BUYER',
  'AVID FISHER',
  'CAMPING ENTHUSIAST',
  'AVID HUNTER',
  'VITAMIN BUYER',
  'DIETING INTEREST',
  'SELF IMPROVEMENT ENTHUSIAST',
  'AUTO PARTS BUYER',
  'HOME VALUE ASSESSED',
  'PURCHASE DATE  (CCYYMMDD)',
  'PURCHASE PRICE',
  'SALES TRANSACTION CODE',
  'MOST RECENT MORTGAGE AMOUNT',
  '2ND MOST RECENT MORTGAGE AMOUNT',
  'PURCHASE 1ST MORTGAGE AMOUNT',
  'PURCHASE 2ND MORTGAGE AMOUNT',
  'MOST RECENT MORTGAGE DATE',
  '2ND MOST RECENT MORTGAGE DATE',
  'PURCHASE MORTGAGE DATE',
  'MOST RECENT MORTGAGE LOAN TYPE CODE',
  '2ND MOST RECENT MORTGAGE LOAN TYPE CODE ',
  'PURCHASE 1ST MORTGAGE LOAN TYPE CODE',
  'PURCHASE 2ND MORTGAGE LOAN TYPE CODE',
  'MOST RECENT LENDER CODE ',
  '2ND MOST RECENT LENDER CODE',
  'PURCHASE LENDER CODE',
  'MOST RECENT LENDER NAME',
  '2ND MOST RECENT LENDER NAME',
  'PURCHASE LENDER NAME',
  'MOST RECENT MORTGAGE INTEREST RATE TYPE',
  '2ND MOST RECENT MORTGAGE INTEREST RATE TYPE',
  'PURCHASE 1ST MORTGAGE INTEREST RATE TYPE',
  'PURCHASE 2ND MORTGAGE INTEREST RATE TYPE',
  'MOST RECENT MORTGAGE INTEREST RATE (NOTE INFERRED DECIMAL  NNDDDD)',
  '2ND MOST RECENT MORTGAGE INTEREST RATE  (NOTE INFERRED DECIMAL  NNDDDD)',
  'PURCHASE 1ST MORTGAGE INTEREST RATE  (NOTE INFERRED DECIMAL  NNDDDD)',
  'PURCHASE 2ND MORTGAGE INTEREST RATE  (NOTE INFERRED DECIMAL  NNDDDD)',
  'YEAR BUILT',
  'AIR CONDITIONING',
  'POOL',
  'FUEL',
  'SEWER',
  'WATER',
  'LOAN TO VALUE',
  'ETHNIC CODE',
  'ETHNIC-CONFIDENCE',
  'ETHNIC-GROUP',
  'LANGUAGE',
  'RELIGION',
  'HISPANIC COUNTRY-CODE',
  'ASSIMILATION CODES',
  'CREDIT RATING',
  'DO NOT CALL FLAG',
  'PERM INDIVIDUAL ID'
]

#define column data types
dtype = {
  'FIRST': NVARCHAR(length=30), 
  'MIDDLE': NVARCHAR(length=1),  
  'LAST': NVARCHAR(length=30),  
  'PREFIX': NVARCHAR(length=8),
  'ADDRESS1': NVARCHAR(length=47),  
  'ADDRESS2': NVARCHAR(length=12),  
  'CITY': NVARCHAR(length=30),  
  'STATE': NVARCHAR(length=2),  
  'ZIP': NVARCHAR(length=5),
  'ZIP4': NVARCHAR(length=4),
  'DPV ': NVARCHAR(length=3),
  'CR ': NVARCHAR(length=4),
  'STATECODE': NVARCHAR(length=2),
  'COUNTYCODE': NVARCHAR(length=3),
  'LATITUDE': NVARCHAR(length=10),
  'LONGITUDE': NVARCHAR(length=11),
  'ADDRESS_TYPE': NVARCHAR(length=1),
  'MSA_CODE': NVARCHAR(length=4),
  'CBSA_CODE': NVARCHAR(length=5),
  'ADDRESS LINE': NVARCHAR(length=1),
  'SUPPRESSION DMA DO NOT MAIL': NVARCHAR(length=1),
  'CENSUS TRACT': NVARCHAR(length=6),
  'CENSUS BLOCK GROUP': NVARCHAR(length=1),
  'CENSUS BLOCK': NVARCHAR(length=3),
  'DPV INDICATOR': NVARCHAR(length=1),
  'PHONE': NVARCHAR(length=10),
  'TIMEZONE': NVARCHAR(length=1),
  'GENDER': NVARCHAR(length=1),
  'HOUSEHOLD ID': NVARCHAR(length=10),
  'INDIVIDUAL ID': NVARCHAR(length=5),
  'INFERRED HOUSEHOLD RANK ': NVARCHAR(length=1),
  'BIRTH_YEAR': NVARCHAR(length=4),
  'BIRTH_MONTH': NVARCHAR(length=2),
  'BIRTH_DATE': NVARCHAR(length=2),
  'EXACT AGE': NVARCHAR(length=2),
  'EST AGE': NVARCHAR(length=2),
  'EST INCOME': NVARCHAR(length=1),
  'NET WORTH': NVARCHAR(length=1),
  'MULTIPLE LINES OF CREDIT INDICATOR': NVARCHAR(length=1),
  'NEW CREDIT LINE INDICATOR': NVARCHAR(length=1),
  'EDUCATION': NVARCHAR(length=1),
  'OCCUPATION': NVARCHAR(length=1),
  'OCCUPATION_DETAILED': NVARCHAR(length=4),
  'BUSINESS OWNER': NVARCHAR(length=1),
  'NUMBER OF CHILDREN': NVARCHAR(length=1),
  'PRESENCE OF CHILDREN': NVARCHAR(length=1),
  'AGE 00 - 02 MALE': NVARCHAR(length=1),
  'AGE 00 - 02 FEMALE': NVARCHAR(length=1),
  'AGE 00 - 02 UNKNOWN GENDER': NVARCHAR(length=1),
  'AGE 03 - 05 MALE': NVARCHAR(length=1),
  'AGE 03 - 05 FEMALE': NVARCHAR(length=1),
  'AGE 03 - 05 UNKNOWN GENDER': NVARCHAR(length=1),
  'AGE 06 - 10 MALE': NVARCHAR(length=1),
  'AGE 06 - 10 FEMALE': NVARCHAR(length=1),
  'AGE 06 - 10 UNKNOWN GENDER': NVARCHAR(length=1),
  'AGE 11 - 15 MALE': NVARCHAR(length=1),
  'AGE 11 - 15 FEMALE': NVARCHAR(length=1),
  'AGE 11 - 15 UNKNOWN GENDER': NVARCHAR(length=1),
  'AGE 16 - 17 MALE': NVARCHAR(length=1),
  'AGE 16 - 17 FEMALE': NVARCHAR(length=1),
  'AGE 16 - 17 UNKNOWN GENDER': NVARCHAR(length=1),
  'MARITAL STATUS IN THE HHLD': NVARCHAR(length=1),
  'HOMEOWNER': NVARCHAR(length=1),
  'LOR': NVARCHAR(length=2),
  'DWELLING': NVARCHAR(length=1),
  'NUMBER OF ADULTS': NVARCHAR(length=1),
  'HOUSEHOLD SIZE ': NVARCHAR(length=1),
  'HOME MARKET VALUE': NVARCHAR(length=1),
  'GENERATIONS IN HOUSEHOLD': NVARCHAR(length=1),
  'MAIL ORDER BUYER': NVARCHAR(length=1),
  'MAIL ORDER RESPONDER': NVARCHAR(length=1),
  'CATALOG BUYER': NVARCHAR(length=1),
  'ONLINE BUYER': NVARCHAR(length=1),
  'WAREHOUSE CLUB': NVARCHAR(length=1),
  'DISCOUNT SHOPPER': NVARCHAR(length=1),
  'CLOTHING BUYER - WOMENS': NVARCHAR(length=1),
  'CLOTHING BUYER - WOMENS - PETITE': NVARCHAR(length=1),
  'CLOTHING BUYER - WOMENS - PLUS SIZE': NVARCHAR(length=1),
  'CLOTHING BUYER - WOMENS - JUNIORS': NVARCHAR(length=1),
  'CLOTHING BUYER - MENS': NVARCHAR(length=1),
  'CLOTHING BUYER - MENS - PLUS SIZE': NVARCHAR(length=1),
  'CLOTHING BUYER - YOUNG MENS': NVARCHAR(length=1),
  'CLOTHING BUYER - CHILDERNS': NVARCHAR(length=1),
  'HEALTH PRODUCTS BUYER': NVARCHAR(length=1),
  'COSMETICS BUYER': NVARCHAR(length=1),
  'JEWELERY BUYER': NVARCHAR(length=1),
  'LUGGAGE BUYER': NVARCHAR(length=1),
  'AMERICAN EXPRESS GOLD': NVARCHAR(length=1),
  'AMERICAN EXPRESS REGULAR': NVARCHAR(length=1),
  'DISCOVER GOLD': NVARCHAR(length=1),
  'DISCOVER REGULAR': NVARCHAR(length=1),
  'RETAIL CARD - PREMIUM': NVARCHAR(length=1),
  'RETAIL CARD ': NVARCHAR(length=1),
  'MASTERCARD GOLD': NVARCHAR(length=1),
  'MASTERCARD REGULAR': NVARCHAR(length=1),
  'VISA GOLD': NVARCHAR(length=1),
  'VISA REGULAR': NVARCHAR(length=1),
  'CHECKING ACCOUNT': NVARCHAR(length=1),
  'GAS/DEPARTMENT/RETAIL CARD': NVARCHAR(length=1),
  'TRAVEL & ENTERTAINMENT CARD': NVARCHAR(length=1),
  'CREDIT CARD OTHER': NVARCHAR(length=1),
  'PREMIUM CREDIT CARD': NVARCHAR(length=1),
  'DEPARTMENT STORE GOLD CARD': NVARCHAR(length=1),
  'FREQUENT CREDIT CARD USER': NVARCHAR(length=1),
  'NEW CREDIT CARD HOLDER': NVARCHAR(length=1),
  'BANK CARD HOLDER': NVARCHAR(length=1),
  'ACTIVE INVESTOR': NVARCHAR(length=1),
  'SAVINGS / CDS / RETIREMENT ACCOUNT': NVARCHAR(length=1),
  'REAL ESTATE INVESTOR': NVARCHAR(length=1),
  'STOCK & BOND INVESTOR': NVARCHAR(length=1),
  'FINANCIAL PUBLICATIONS READER': NVARCHAR(length=1),
  'BUSINESS OPPORTUNITY SEEKER': NVARCHAR(length=1),
  'INTERNATIONAL INVESTOR': NVARCHAR(length=1),
  'INVESTMENT PROPERTIES OWNED': NVARCHAR(length=3),
  'DONORS ': NVARCHAR(length=1),
  'DONORS BY MAIL': NVARCHAR(length=1),
  'CHARITABLE DONORS': NVARCHAR(length=1),
  'ANIMAL WELFARE DONORS': NVARCHAR(length=1),
  'DONORS TO THE ARTS': NVARCHAR(length=1),
  'CHILDREND WELFARE DONORS': NVARCHAR(length=1),
  'WILDLIFE DONORS': NVARCHAR(length=1),
  'ENVIRONMENTAL DONORS': NVARCHAR(length=1),
  'MEDICAL RESEARCH DONORS': NVARCHAR(length=1),
  'HUMANITARIAN DONORS': NVARCHAR(length=1),
  'POLITICAL DONORS': NVARCHAR(length=1),
  'DONORS TO REPUBLICAN CAUSES': NVARCHAR(length=1),
  'DONORS TO DEMOCRATIC CAUSES': NVARCHAR(length=1),
  'DONORS TO RELIGIOUS CAUSES': NVARCHAR(length=1),
  'DONORS TO VETERANS CAUSES': NVARCHAR(length=1),
  'DONORS TO OTHER CAUSES': NVARCHAR(length=1),
  'DONORS TO COMMUNITY BASED ORGANIZATIONS': NVARCHAR(length=1),
  'VETERAN PRESENT ': NVARCHAR(length=1),
  'CHILDREN MAGAZINE SUBSCRIBER': NVARCHAR(length=1),
  'SINGLE PARENT FLAG': NVARCHAR(length=1),
  'YOUNG CHILDREN IN HOUSEHOLD': NVARCHAR(length=1),
  'TOY BUYER': NVARCHAR(length=1),
  'BABY PRODUCT BUYER': NVARCHAR(length=1),
  'SCHOOL AGE CHILDREN ': NVARCHAR(length=1),
  'CHILDREN PRODUCT CLUSTER CODE': NVARCHAR(length=1),
  'YOUNG ADULT PRESENT': NVARCHAR(length=1),
  'SENIOR PRESENT': NVARCHAR(length=1),
  'CHILDREN PRODUCT BUYER': NVARCHAR(length=1),
  'GRANDPARENT INDICATOR': NVARCHAR(length=1),
  'CHRISTIAN FAMILY INDICATOR': NVARCHAR(length=1),
  'PET IN HOUSEHOLD': NVARCHAR(length=1),
  'HORSEBACK RIDING INTEREST': NVARCHAR(length=1),
  'CAT PRESENT IN HOUSEHOLD': NVARCHAR(length=1),
  'DOG PRESENT IN HOUSEHOLD': NVARCHAR(length=1),
  'BIRD ENTHUSIASTS': NVARCHAR(length=1),
  'OTHER PET IN HOUSEHOLD': NVARCHAR(length=1),
  'CONTINUING EDUCATION INTEREST': NVARCHAR(length=1),
  'WORKING WOMEN IN HOUSEHOLD': NVARCHAR(length=1),
  'AFRICAN AMERICAN PROFESSIONAL': NVARCHAR(length=1),
  'SMALL OFFICE / HOME OFFICE ': NVARCHAR(length=1),
  'CAREER MINDED': NVARCHAR(length=1),
  'MAGAZINE SUBSCRIBER': NVARCHAR(length=1),
  'BOOK BUYER': NVARCHAR(length=1),
  'AUDIO BOOK BUYER': NVARCHAR(length=1),
  'READING INTEREST': NVARCHAR(length=1),
  'RELIGIOUS READING INTEREST': NVARCHAR(length=1),
  'SCIENCE FICTION READING INTEREST': NVARCHAR(length=1),
  'MAGAZINE READER': NVARCHAR(length=1),
  'AUDIO BOOK INTEREST': NVARCHAR(length=1),
  'HISTORY / MILITARY BUFF': NVARCHAR(length=1),
  'POLITICIAL INTEREST': NVARCHAR(length=1),
  'RELIGIOUS HOUSEHOLD': NVARCHAR(length=1),
  'ASTRONOMY INTEREST': NVARCHAR(length=1),
  'ONLINE EDUCATION INTEREST': NVARCHAR(length=1),
  'GAME PLAYER': NVARCHAR(length=1),
  'WIFI HOME NETWORK': NVARCHAR(length=1),
  'MOVIE BUYER / RENTER / DOWNLOADER': NVARCHAR(length=1),
  'HOME THEATER ': NVARCHAR(length=1),
  'COMPUTER / ACCESSORIES BUYER': NVARCHAR(length=1),
  'LUXURY APPLIANCE BUYER': NVARCHAR(length=1),
  'SATELLITE TV INTEREST': NVARCHAR(length=1),
  'SURROUND SOUND SYSTEM': NVARCHAR(length=1),
  'MP3 PLAYER': NVARCHAR(length=1),
  'LP/CD MUSIC COLLECTOR': NVARCHAR(length=1),
  'MUSIC ENTHUSIAST': NVARCHAR(length=1),
  'MOVIE COLLECTOR': NVARCHAR(length=1),
  'CABLE TELEVISION PRESENT': NVARCHAR(length=1),
  'VIDEO GAMER': NVARCHAR(length=1),
  'SATELLITE DISH PRESENT': NVARCHAR(length=1),
  'COMPUTER OWNER': NVARCHAR(length=1),
  'COMPUTER GAMES': NVARCHAR(length=1),
  'CONSUMER ELECTRONICS BUYER': NVARCHAR(length=1),
  'MOVIE AND MUSIC CLUSTER': NVARCHAR(length=1),
  'CELL PHONE OWNER': NVARCHAR(length=1),
  'ANTIQUES BUYER': NVARCHAR(length=1),
  'ART BUYER': NVARCHAR(length=1),
  'THEATER ENTHUSIAST': NVARCHAR(length=1),
  'FINE ARTS ENTHUSIAST': NVARCHAR(length=1),
  'MUSICAL INSTUMENT IN HOUSEHOLD': NVARCHAR(length=1),
  'INTEREST IN COLLECTIBLES': NVARCHAR(length=1),
  'STAMP ENTHUSIAST': NVARCHAR(length=1),
  'COIN ENTHUSIAST': NVARCHAR(length=1),
  'ART ENTHUSIAST': NVARCHAR(length=1),
  'ANTIQUES ENTHUSIAST': NVARCHAR(length=1),
  'AVID COLLECTOR': NVARCHAR(length=1),
  'BASEBALL CARD / SPORTS MEMORABILIA BUYER': NVARCHAR(length=1),
  'MILITARY ENTHUSIAST': NVARCHAR(length=1),
  'COLLECTIBLE CLUSTER': NVARCHAR(length=1),
  'DO IT YOURSELFER': NVARCHAR(length=1),
  'AUTOMOTIVE WORK ENTHUSIAST': NVARCHAR(length=1),
  'KNITTING / SEWING ENTHUSIAST': NVARCHAR(length=1),
  'WOODWORKING ENTHUSIAST': NVARCHAR(length=1),
  'PHOTOGRAPHY ENTHUSIAST': NVARCHAR(length=1),
  'AVIATION ENTHUSIAST': NVARCHAR(length=1),
  'HOUSE PLANTS BUYER': NVARCHAR(length=1),
  'CRAFT ENTHUSIAST': NVARCHAR(length=1),
  'HOUSEHOLD PRODUCTS BUYER': NVARCHAR(length=1),
  'GARDENING PRODUCT BUYER': NVARCHAR(length=1),
  'GARDENING ENTHUSIAST': NVARCHAR(length=1),
  'PHOTOGRAPHY EQUIPMENT BUYER': NVARCHAR(length=1),
  'SMOKER': NVARCHAR(length=1),
  'FURNITURE BUYER': NVARCHAR(length=1),
  'HOME IMPROVEMENT': NVARCHAR(length=1),
  'NEEDS HOME IMPROVEMENTS': NVARCHAR(length=1),
  'WINE ENTHUSIAST': NVARCHAR(length=1),
  'COOKING ENTHUSIAST': NVARCHAR(length=1),
  'GOUMET COOKING PRODUCT BUYER': NVARCHAR(length=1),
  'ORGANIC FOOD BUYER': NVARCHAR(length=1),
  'COOKING & FOOD CLUSTER': NVARCHAR(length=1),
  'CROSSWORD PUZZLE PLAYER': NVARCHAR(length=1),
  'CASINO GAMBLER': NVARCHAR(length=1),
  'SWEEPSTAKES ENTHUSIAST': NVARCHAR(length=1),
  'INTEREST IN TRAVEL': NVARCHAR(length=1),
  'TRAVELS DOMESTICALLY': NVARCHAR(length=1),
  'TRAVELS INTERNATIONALLY': NVARCHAR(length=1),
  'CRUISE VACATION INTEREST': NVARCHAR(length=1),
  'AT HOME ENTHUSIASTS': NVARCHAR(length=1),
  'HANDS ON ENTHUSIASTS': NVARCHAR(length=1),
  'ACTIVE LIVING ENTHUSIASTS': NVARCHAR(length=1),
  'LUXURY LIFESTYLE ENTHUSIASTS': NVARCHAR(length=1),
  'CULTURAL ARTS ENTHUSIASTS': NVARCHAR(length=1),
  'HIGH TECH EARLY ADOPTERS': NVARCHAR(length=1),
  'HEALTHY LIVING ENTHUSIAST': NVARCHAR(length=1),
  'RUNNING ENTHUSIAST': NVARCHAR(length=1),
  'BICYCLING ENTHUSIAST': NVARCHAR(length=1),
  'AVID WALKER': NVARCHAR(length=1),
  'EXERCISE CLASS ENTHUSIAST': NVARCHAR(length=1),
  'AUTO RACING ENTHUSIAST': NVARCHAR(length=1),
  'SPORTS FAN': NVARCHAR(length=1),
  'FOOTBALL ENTHUSIAST': NVARCHAR(length=1),
  'BASEBALL ENTHUSIAST': NVARCHAR(length=1),
  'BASKETBALL ENTHUSIAST': NVARCHAR(length=1),
  'HOCKEY ENTHUSIAST': NVARCHAR(length=1),
  'SOCCER ENTHUSIAST': NVARCHAR(length=1),
  'TENNIS ENTHUSIAST': NVARCHAR(length=1),
  'GOLF ENTHUSIAST': NVARCHAR(length=1),
  'SKIING / SNOWBOARDING ENTHUSIAST': NVARCHAR(length=1),
  'SWIMMING ENTHUSIAST': NVARCHAR(length=1),
  'MOTORCYCLING ENTHUSIAST': NVARCHAR(length=1),
  'NASCAR ENTHUSIAST': NVARCHAR(length=1),
  'BOATING ENTHUSIAST': NVARCHAR(length=1),
  'SCUBA DIVING ENTHUSIAST': NVARCHAR(length=1),
  'SPORTING GOODS BUYER': NVARCHAR(length=1),
  'HUNTING PRODUCT BUYER': NVARCHAR(length=1),
  'AVID FISHER': NVARCHAR(length=1),
  'CAMPING ENTHUSIAST': NVARCHAR(length=1),
  'AVID HUNTER': NVARCHAR(length=1),
  'VITAMIN BUYER': NVARCHAR(length=1),
  'DIETING INTEREST': NVARCHAR(length=1),
  'SELF IMPROVEMENT ENTHUSIAST': NVARCHAR(length=1),
  'AUTO PARTS BUYER': NVARCHAR(length=1),
  'HOME VALUE ASSESSED': NVARCHAR(length=8),
  'PURCHASE DATE  (CCYYMMDD)': NVARCHAR(length=8),
  'PURCHASE PRICE': NVARCHAR(length=11),
  'SALES TRANSACTION CODE': NVARCHAR(length=1),
  'MOST RECENT MORTGAGE AMOUNT': NVARCHAR(length=8),
  '2ND MOST RECENT MORTGAGE AMOUNT': NVARCHAR(length=8),
  'PURCHASE 1ST MORTGAGE AMOUNT': NVARCHAR(length=8),
  'PURCHASE 2ND MORTGAGE AMOUNT': NVARCHAR(length=8),
  'MOST RECENT MORTGAGE DATE': NVARCHAR(length=8),
  '2ND MOST RECENT MORTGAGE DATE': NVARCHAR(length=8),
  'PURCHASE MORTGAGE DATE': NVARCHAR(length=8),
  'MOST RECENT MORTGAGE LOAN TYPE CODE': NVARCHAR(length=1),
  '2ND MOST RECENT MORTGAGE LOAN TYPE CODE ': NVARCHAR(length=1),
  'PURCHASE 1ST MORTGAGE LOAN TYPE CODE': NVARCHAR(length=1),
  'PURCHASE 2ND MORTGAGE LOAN TYPE CODE': NVARCHAR(length=1),
  'MOST RECENT LENDER CODE ': NVARCHAR(length=3),
  '2ND MOST RECENT LENDER CODE': NVARCHAR(length=3),
  'PURCHASE LENDER CODE': NVARCHAR(length=3),
  'MOST RECENT LENDER NAME': NVARCHAR(length=60),
  '2ND MOST RECENT LENDER NAME': NVARCHAR(length=60),
  'PURCHASE LENDER NAME': NVARCHAR(length=60),
  'MOST RECENT MORTGAGE INTEREST RATE TYPE': NVARCHAR(length=1),
  '2ND MOST RECENT MORTGAGE INTEREST RATE TYPE': NVARCHAR(length=1),
  'PURCHASE 1ST MORTGAGE INTEREST RATE TYPE': NVARCHAR(length=1),
  'PURCHASE 2ND MORTGAGE INTEREST RATE TYPE': NVARCHAR(length=1),
  'MOST RECENT MORTGAGE INTEREST RATE (NOTE INFERRED DECIMAL  NNDDDD)': NVARCHAR(length=6),
  '2ND MOST RECENT MORTGAGE INTEREST RATE  (NOTE INFERRED DECIMAL  NNDDDD)': NVARCHAR(length=6),
  'PURCHASE 1ST MORTGAGE INTEREST RATE  (NOTE INFERRED DECIMAL  NNDDDD)': NVARCHAR(length=6),
  'PURCHASE 2ND MORTGAGE INTEREST RATE  (NOTE INFERRED DECIMAL  NNDDDD)': NVARCHAR(length=6),
  'YEAR BUILT': NVARCHAR(length=4),
  'AIR CONDITIONING': NVARCHAR(length=1),
  'POOL': NVARCHAR(length=1),
  'FUEL': NVARCHAR(length=1),
  'SEWER': NVARCHAR(length=1),
  'WATER': NVARCHAR(length=1),
  'LOAN TO VALUE': NVARCHAR(length=3),
  'ETHNIC CODE': NVARCHAR(length=2),
  'ETHNIC-CONFIDENCE': NVARCHAR(length=1),
  'ETHNIC-GROUP': NVARCHAR(length=1),
  'LANGUAGE': NVARCHAR(length=2),
  'RELIGION': NVARCHAR(length=1),
  'HISPANIC COUNTRY-CODE': NVARCHAR(length=2),
  'ASSIMILATION CODES': NVARCHAR(length=1),
  'CREDIT RATING': NVARCHAR(length=1),
  'DO NOT CALL FLAG': NVARCHAR(length=1),
  'PERM INDIVIDUAL ID': NVARCHAR(length=10)
}

# USER INPUT SECTION END
###################################################################

#for each txt file in path
  #split into n-record files
  #rename each file split-...
#for each txt file starting with split- in path
  #import to sql
#for each txt file starting with split- in path
  #delete file
  
  	
#########################################################
print("-------------------------------------")
print("SPLITTING FILES")
print("-------------------------------------")


split_start_time = datetime.now()

try:
	
  i = 0
  for file in os.listdir(path):
  	
    #open file to import
    filename = os.fsdecode(file)
  
    if str(filename[-3:]) != '.py':
    
      print(str(filename))

      #if it's a txt...
      if filename.endswith("." + str(extension)) and not(filename.startswith('consumer_split-')):  
    	
        print("file " + str(i + 1) + ": " + str(path) + "\\" + str(filename) + " importing...")
  	    
        full_path = str(path) + "\\" + str(filename)
        filename_no_ext = os.path.splitext(os.path.basename(filename))[0]
        
        #below section is from Nav and a little bit from here: https://stackoverflow.com/questions/53028454/splitting-10gb-csv-file-into-equal-parts-without-reading-into-memory
        print("opening infile...")
        with open(file) as infile:
          print("opened infile")
          # number of current line read
          num = 0
          # number of output file
          output_file_num = 1
       
          # your output file
          print("opening outfile...")
          outfile = open('consumer_split-' + str(filename_no_ext) + '-' + str(i) + str(output_file_num) + '.txt', "w")
          print("opened outfile")

          for row in infile:
            #print(row)
            num = num + 1
        
            #writer.writerow(row)
            outfile.write(row.replace('"', ' '))#.replace("'", " "))
            # If we got a 10000 rows read, save current out file
            # and create a new one
            if num > split_amount:
              output_file_num = output_file_num + 1
              outfile.close()
              #writer = None

              # create new file
              outfile = open('consumer_split-' + str(filename_no_ext) + '-' + str(i) + str(output_file_num) + '.txt', "w")
              print('consumer_split-' + str(filename_no_ext) + '-' + str(i) + str(output_file_num) + '.txt')

              # reset counter
              num = 0 

        # Closing the files
        infile.close()
        outfile.close() 
        
        i = i + 1

        print("")
     
except Exception as e:
  input(e)
print("")

split_end_time = datetime.now()

#########################################################
print("-------------------------------------")
print("IMPORT")
print("-------------------------------------")

import_start_time = datetime.now()

try:
  ###################################################################
  # SET UP
  ###################################################################

  engine = create_engine("mssql+pyodbc://:@" + str(server) + "/" + str(database) + "?driver=SQL+Server", use_setinputsizes=False, fast_executemany=True)
          	
  ###################################################################
  # IMPORT
  ###################################################################
  

  i = 0
  tables_imported_to_sql = 0


  #for every file in the current directory...
  for file in os.listdir(path):
	
    #open file to import
    filename = os.fsdecode(file)
  
    if str(filename[-3:]) != '.py':
    
      print("file " + str(i + 1) + ": " + str(filename))

      #if it's a txt...
      if filename.endswith("." + str(extension)) and filename.startswith('consumer_split-'):  
    	
          print(str(path) + "\\" + str(filename) + " importing...")

          #get path and name w/o extension
          full_path = str(path) + "\\" + str(filename)
          filename_no_ext = os.path.splitext(os.path.basename(filename))[0]

          with engine.connect() as conn:

            #set up table for import
            type = defaultdict(lambda: str)

            #read fixed txt file
            #if user wants panda to infer colspecs

            #if column_specs == []: #if user didnt enter colspecs, try to infer them
            #  df = pd.read_fwf(full_path, dtype=type, keep_default_na=False, colspecs="infer", encoding='latin-1')
            #else:  #if user entered colspecs
            print("reading file...")
            df = pd.read_fwf(full_path, dtype=type, keep_default_na=False, names=column_names, colspecs=column_specs, encoding='latin-1', header=None)
            print("read file")
          
            #import table and set each column to NVARCHAR(length=255), no index column, and append if exists
            print("importing file...")
            #https://stackoverflow.com/questions/29706278/python-pandas-to-sql-with-sqlalchemy-how-to-speed-up-exporting-to-ms-sql
            df.to_sql(merged_table_name , schema='dbo', con=engine, dtype=dtype, index=False, if_exists='append')#, method='multi')
            print("imported file")

            #necessary to finalize the import
            print("committing...")
            conn.commit()
            print("commited")
          
          print(str(path) + "\\" + str(filename) + " imported as [" + str(merged_table_name) + "]")

          tables_imported_to_sql = tables_imported_to_sql + 1

    else:
      print(str(path) + "\\" + str(filename) + " skipped because it's not a txt file.")

    print("")

    i = i + 1
 
except Exception as e:
  input(e)
print("")

import_end_time = datetime.now()

#########################################################
print("-------------------------------------")
print("DELETING FILES")
print("-------------------------------------")
i = 0
files_deleted = 0

delete_start_time = datetime.now()

try:

  #for every file in the current directory...
  for file in os.listdir(path):
	
    #open file to import
    filename = os.fsdecode(file)
  
    if str(filename[-3:]) != '.py':
    
      print("file " + str(i + 1) + ": " + str(filename))

      #if it's a txt...
      if filename.endswith("." + str(extension)) and filename.startswith('consumer_split-'):  
    	
          print(str(path) + "\\" + str(filename) + " deleteing...")


          if os.path.exists(str(path) + "\\" + str(filename)):
            os.remove(str(path) + "\\" + str(filename))
            files_deleted = files_deleted+ 1
          else:
            print("The file does not exist")
            
          i = i + 1

    else:
      print(str(path) + "\\" + str(filename) + " skipped because it's not a txt file.")

    i = i + 1

except Exception as e:
  input(e)
print(str(files_deleted) + " files deleted.")
print("")

delete_end_time = datetime.now()

###################################################################
# FINAL MESSAGE
###################################################################
print(str(tables_imported_to_sql) + " " + str(seperator_description) + " " + str(extension) + " files imported to " + str(server) + ".." + str(database))
print("")

print("split_start_time " + str(split_start_time))
print("split_end_time " + str(split_end_time))
split_delta = split_end_time-split_start_time
print("Splitting the files took " + str(round((((split_delta.days * 86400) + split_delta.seconds) / 3600), 3)) + " hours.")
print("")

print("import_start_time " + str(import_start_time))
print("import_end_time " + str(import_end_time))
import_delta = import_end_time-import_start_time
print("Importing the files took " + str(round((((import_delta.days * 86400) + import_delta.seconds) / 3600), 3)) + " hours.")
print("That's an average of " + str(round(((import_delta.days * 86400) + import_delta.seconds) / tables_imported_to_sql, 6)) + " seconds per file.")
print("Split amount was " + str(split_amount) + " records.")
print("")

print("delete_start_time " + str(delete_start_time))
print("delete_end_time " + str(delete_end_time))
delete_delta = delete_end_time-delete_start_time
print("Deleting the files took " + str(round((((delete_delta.days * 86400) + delete_delta.seconds) / 3600), 3)) + " hours.")
print("")

total_delta = delete_end_time-split_start_time
print("In total it took " + str(round((((total_delta.days * 86400) + total_delta.seconds) / 3600), 3)) + " hours.")
print("")

input("Exit the Window")

